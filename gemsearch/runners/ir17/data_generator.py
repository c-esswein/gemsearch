''''Loads ir2017 recommender challenge data. (generated by uibk)
'''
import json
import csv
import numpy as np
from gemsearch.core.abstract_data_generator import ADataGenerator
from gemsearch.storage.Storage import Storage
from gemsearch.storage.Tracks import Tracks
from gemsearch.core.name_cleaning import clean_tag
from pprint import pprint

# TODO integrate albums

class DataGenerator(ADataGenerator):
    
    def removeMissingTracks(self, sourceFilePath, output):
        # TODO: del
        storage = Storage()
        tracksRepo = Tracks()

        with open(output, 'w', encoding="utf-8") as outFile:
            with open(sourceFilePath, 'r', encoding="utf-8") as csvFile:
                typeReader = csv.DictReader(csvFile, delimiter=',', quotechar='|')
                csvWriter = csv.writer(outFile, delimiter=',', lineterminator='\n', quotechar='|', quoting=csv.QUOTE_MINIMAL)

                for line in typeReader:
                    trackData = tracksRepo.getTracks().find_one({'uri': line['track']})

                    if trackData is not None:
                        csvWriter.write(line)


    def importMissingAudioFeatures(self, sourceFilePath):
        # TODO: del
        storage = Storage()
        tracksRepo = Tracks()
        audioCol = storage.getCollection('audios')

        with open(sourceFilePath, 'r', encoding="utf-8") as csvFile:
            typeReader = csv.DictReader(csvFile, delimiter=',', quotechar='|')

            for line in typeReader:
                trackData = tracksRepo.getTracks().find_one({'uri': line['track']})

                if trackData is None:
                    print('missing track:' + str(line['track']))
                    continue

                features = audioCol.find_one({'track_id': trackData['_id']})

                if features is None:
                    print('missing: ' + str(trackData['_id']))
                    audioCol.insert_one({
                        'track_id': trackData['_id'],
                        'tempo': line['tempo'],
                        'energy': line['energy'],
                        'liveness': line['liveness'],
                        'speechiness': line['speechiness'],
                        'acousticness': line['acousticness'],
                        'danceability': line['danceability'],
                        'duration': line['duration'],
                        'loudness': line['loudness'],
                        'valence': line['valence'],
                        'instrumentalness': line['instrumentalness']
                    })

    def generate(self, sourceFilePath, limit = -1):
        # open ir2017 file
        with open(sourceFilePath, 'r', encoding="utf-8") as csvFile:
            typeReader = csv.DictReader(csvFile, delimiter=',', quotechar='|')

            # read data
            data = []
            if limit > 0:
                for x in range(limit):
                    row = next(typeReader)
                    data.append([row['user'], row['track']])
            else:
                for row in typeReader:
                    data.append([row['user'], row['track']])

        data = np.array(data)

        # --- user tracks ---
        for (user, trackId) in data:
            self.write('user_track', [
                user,
                trackId
            ])

        # --- tracks ---
        tracksRepo = Tracks()
        tracks = np.unique(data[:,1])

        for trackId in tracks:

            # --- features ---
            trackData = tracksRepo.getTracks().find_one({'uri': trackId})
            features = tracksRepo.getFeatures(trackData['_id'])
            
            self.writeJson('track_features', {
                'id': trackId,
                'name': trackData['name'],
                'features': {
                    'valence': features['valence']
                }
            })
            
            # --- artists ---
            for artist in trackData['artists']:
                artistId = artist['id']

                self.write('track_artist', [
                    trackId,
                    artist['uri'],
                    artist['name']
                ])

                '''
                if artistId is in self._idWritten:
                    continue
                else:
                    self._idWritten[artistId] = True
                
                # TODO write artist genres
                '''
            

            # --- tags ---
            if 'tags' in trackData:
                for tag in trackData['tags']:
                    tagName = clean_tag(tag)
                    if tagName:
                        self.write('track_tag', [
                            trackId,
                            tagName
                        ])

        self._closeHandlers()

if __name__ == "__main__":
    generator = DataGenerator('data/ir17_data/')
    generator.importMissingAudioFeatures('data/ir2017.csv')
    # generator.generate('data/ir2017.csv', 400)
    print('data written')
